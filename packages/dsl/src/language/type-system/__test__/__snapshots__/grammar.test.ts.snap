// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`type system grammar > type alias > call type alias with type parameters 1`] = `
"{
  "$type": "FormMLDeclaration",
  "typeDeclarations": [
    {
      "$type": "TypeAliasDeclaration",
      "name": "MyType",
      "typeParameters": [
        {
          "$type": "TypeParameterDeclaration",
          "name": "T"
        },
        {
          "$type": "TypeParameterDeclaration",
          "name": "U"
        }
      ],
      "type": {
        "$type": "ObjectType",
        "properties": [
          {
            "$type": "Property",
            "name": "name",
            "type": {
              "$type": "TypeRef",
              "ref": {
                "$ref": "#/typeDeclarations@0/typeParameters@0"
              },
              "typeArguments": []
            }
          },
          {
            "$type": "Property",
            "name": "age",
            "type": {
              "$type": "TypeRef",
              "ref": {
                "$ref": "#/typeDeclarations@0/typeParameters@1"
              },
              "typeArguments": []
            }
          }
        ]
      }
    }
  ],
  "declarations": [
    {
      "$type": "AnnotationDeclaration",
      "name": "myAnnotation",
      "parameters": [
        {
          "$type": "Parameter",
          "name": "param",
          "type": {
            "$type": "TypeRef",
            "ref": {
              "$ref": "#/typeDeclarations@0"
            },
            "typeArguments": [
              {
                "$type": "TextType",
                "name": "text"
              },
              {
                "$type": "NumType",
                "name": "num"
              }
            ]
          },
          "optional": false
        }
      ],
      "returnType": {
        "$type": "TypeRef",
        "ref": {
          "$ref": "#/typeDeclarations@0"
        },
        "typeArguments": [
          {
            "$type": "BoolType",
            "name": "bool"
          },
          {
            "$type": "DecimalType",
            "name": "decimal"
          }
        ]
      }
    }
  ]
}"
`;

exports[`type system grammar > type alias > declare object type alias 1`] = `
"{
  "$type": "FormMLDeclaration",
  "typeDeclarations": [
    {
      "$type": "TypeAliasDeclaration",
      "name": "MyType",
      "type": {
        "$type": "ObjectType",
        "properties": [
          {
            "$type": "Property",
            "name": "name",
            "type": {
              "$type": "TextType",
              "name": "text"
            }
          },
          {
            "$type": "Property",
            "name": "age",
            "type": {
              "$type": "NumType",
              "name": "num"
            }
          }
        ]
      },
      "typeParameters": []
    }
  ],
  "declarations": []
}"
`;

exports[`type system grammar > type alias > declare simple type alias 1`] = `
"{
  "$type": "FormMLDeclaration",
  "typeDeclarations": [
    {
      "$type": "TypeAliasDeclaration",
      "name": "MyType",
      "type": {
        "$type": "TextType",
        "name": "text"
      },
      "typeParameters": []
    }
  ],
  "declarations": []
}"
`;

exports[`type system grammar > type alias > declare type alias with type parameters 1`] = `
"{
  "$type": "FormMLDeclaration",
  "typeDeclarations": [
    {
      "$type": "TypeAliasDeclaration",
      "name": "MyType",
      "typeParameters": [
        {
          "$type": "TypeParameterDeclaration",
          "name": "T"
        },
        {
          "$type": "TypeParameterDeclaration",
          "name": "U"
        }
      ],
      "type": {
        "$type": "ObjectType",
        "properties": [
          {
            "$type": "Property",
            "name": "name",
            "type": {
              "$type": "TypeRef",
              "ref": {
                "$ref": "#/typeDeclarations@0/typeParameters@0"
              },
              "typeArguments": []
            }
          },
          {
            "$type": "Property",
            "name": "age",
            "type": {
              "$type": "TypeRef",
              "ref": {
                "$ref": "#/typeDeclarations@0/typeParameters@1"
              },
              "typeArguments": []
            }
          }
        ]
      }
    }
  ],
  "declarations": []
}"
`;

exports[`type system grammar > type alias > type alias can be used as a type 1`] = `
"{
  "$type": "FormMLDeclaration",
  "typeDeclarations": [
    {
      "$type": "TypeAliasDeclaration",
      "name": "MyType",
      "type": {
        "$type": "TextType",
        "name": "text"
      },
      "typeParameters": []
    }
  ],
  "declarations": [
    {
      "$type": "AnnotationDeclaration",
      "name": "myAnnotation",
      "parameters": [
        {
          "$type": "Parameter",
          "name": "param",
          "type": {
            "$type": "TypeRef",
            "ref": {
              "$ref": "#/typeDeclarations@0"
            },
            "typeArguments": []
          },
          "optional": false
        }
      ],
      "returnType": {
        "$type": "TypeRef",
        "ref": {
          "$ref": "#/typeDeclarations@0"
        },
        "typeArguments": []
      }
    }
  ]
}"
`;
