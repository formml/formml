import { EmptyFileSystem, type Module, inject } from 'langium'
import {
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
} from 'langium/lsp'

import {
  FormMLGeneratedModule,
  FormMLGeneratedSharedModule,
} from './generated/module.js'
// import { FormMLValidator, registerValidationChecks } from './formml-validator'

/**
 * Declaration of custom services - add your own service classes here.
 */
export type FormMLAddedServices = {
  validation: {
    // FormMLValidator: FormMLValidator
  }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type FormMLServices = LangiumServices & FormMLAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const FormMLModule: Module<
  FormMLServices,
  PartialLangiumServices & FormMLAddedServices
> = {
  validation: {
    // FormMLValidator: () => new FormMLValidator(),
  },
}

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createFormMLServices(context: DefaultSharedModuleContext): {
  FormML: FormMLServices
  shared: LangiumSharedServices
} {
  const shared = inject(
    createDefaultSharedModule(context),
    FormMLGeneratedSharedModule,
  )
  const FormML = inject(
    createDefaultModule({ shared }),
    FormMLGeneratedModule,
    FormMLModule,
  )
  shared.ServiceRegistry.register(FormML)
  // registerValidationChecks(FormML)
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    void shared.workspace.ConfigurationProvider.initialized({})
  }
  return { FormML, shared }
}

export const createInMemoryServices = () =>
  createFormMLServices(EmptyFileSystem)
